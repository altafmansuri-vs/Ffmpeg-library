// Apply the Android Library plugin
apply plugin: 'com.android.library'
// Apply the Maven Publishing plugin
apply plugin: 'maven-publish'

android {
    compileSdk 34
    namespace "com.pub.secure"

    defaultConfig {
        compileSdk 34
        minSdkVersion 24
        targetSdkVersion 34
        project.archivesBaseName = "mobile-ffmpeg"
        consumerProguardFiles 'proguard-rules.pro'

        // Add these for 16KB page size support
        ndk {
            // Specify ABIs you want to support
            abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86', 'x86_64'
        }

        externalNativeBuild {
            cmake {
                cppFlags "-std=c++17 -fPIC"
                arguments "-DANDROID_PLATFORM=android-21",
                        "-DANDROID_STL=c++_shared"
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['src/main/jniLibs']
        }
    }

    // Add packaging options for 16KB page size compatibility
    packagingOptions {
        jniLibs {
            useLegacyPackaging = true
        }
        resources {
            excludes += ['**/libmobile-ffmpeg.so']
        }
    }

    // Enable NDK version specification
    ndkVersion "25.1.8937393"

    testOptions {
        unitTests.returnDefaultValues = true
    }

    // Add compile options
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

// ----------------------------------------------------------------------
// Configuration for JitPack / Maven Publishing
// ----------------------------------------------------------------------

// Capture the JAR and Javadoc tasks for publishing metadata (optional but recommended)
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier.set('sources')
}

task javadoc(type: Javadoc) {
    title = 'MobileFFmpeg'
    // ... existing Javadoc configuration
    destinationDir = file("${projectDir}/../../docs/android/javadoc")
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    source = android.sourceSets.main.java.srcDirs
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

// JitPack Fix: Explicitly define the publishing artifacts and their paths
publishing {
    publications {
        aar(MavenPublication) {
            groupId = 'com.pub.secure'
            artifactId = 'mobile-ffmpeg'
            version = '1.0.0' // JitPack will use the Git tag

            // CRITICAL FIX: Explicitly add the AAR artifact.
            // This is the reliable way to provide the artifact without using the problematic 'components.release'.
            artifact("$buildDir/outputs/aar/${project.name}-release.aar")

            // Attach sources and javadoc
            artifact sourcesJar
            artifact javadocJar

            // CRITICAL FIX 2: Explicitly set the POM path to help JitPack find it
            // We use the artifactId and version to form the final name
            pom.withXml {
                def name = "mobile-ffmpeg"
                def pomPath = "${project.buildDir}/publications/aar/${name}-${version}.pom"
                destination = file(pomPath)
            }
        }
    }
}


dependencies {
    testImplementation "androidx.test.ext:junit:1.1.1"
    testImplementation "org.json:json:20190722"
}